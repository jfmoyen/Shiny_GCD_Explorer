runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pp
df %>% ggplot() + geom_point(aes(x,y),color=NULL)
df %>% ggplot() + geom_point(aes(x,y,color=NULL))
df %>% ggplot() + geom_point(aes(x,y,shape=NULL))
df %>% ggplot() + geom_point(aes(x,y,color="red"))
df %>% ggplot() + geom_point(aes(x,y,color="blue"))
df %>% ggplot() + geom_point(aes(x,y,color="blue"))+scale_color_identity()
df %>% ggplot() + geom_point(aes(x,y,color=3))+scale_color_identity()
df %>% ggplot() + geom_point(aes(x,y,color="3"))+scale_color_identity()
df %>% ggplot() + geom_point(aes(x,y,color="5"))+scale_color_identity()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
query
runApp()
runApp()
usethis::create_github_token()
install.packages("usethis")
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
shiny::runApp()
?tidy-select
?`tidy-select`
??`tidy-select`
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?brushedPoints
runApp()
runApp()
runApp()
runApp()
foo
ata <- read_delim("atacazo.txt", delim = "\t",
escape_double = FALSE, trim_ws = TRUE)
ata
ata %>% bind_cols(c("u1","u2"))
ata %>% bind_cols(u1,u2)
ata %>% bind_cols("u1","u2")
?bind_cols
ata %>% bind_cols(u1=NULL,u2=NULL)
u1 <- NULL
ata %>% bind_cols(u1)
add_column()
?add_column
ata %>% add_column(u1)
ata %>% add_column(u1=NA)
ata %>% add_column(u1=NULL)
ata %>% add_column(u1=na())
ata %>% add_column(u1="")
ata$u1
ata %>% add_column(u1="") %>% pull(u1)
ata %>% add_column(u1=NA)
ata %>% add_column(u1=NA) -> foo
foo$u1
foo$u1 <- "a"
foo$u1
runApp()
runApp()
runApp()
runApp()
the_data$selected
runApp()
?reactiveVal
?reactiveValus
?reactiveValues
shiny::runApp()
runApp()
runApp()
install.packages("ggiraph")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
run_girafe_example("gender")
run_girafe_example("cars")
run_girafe_example("click_scale")
run_girafe_example("crimes")
run_girafe_example("DT")
run_girafe_example("dynamic_ui")
run_girafe_example("iris")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
v$selectedData
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
alpha
alpha$mapping()
input$alpha_by
ns
input
input$`alphaControls-alpha_rng`
input$alpha_rng
alphaControls
runApp()
input
id
runApp()
input
id
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?pull
runApp()
runApp()
?try
try({cat("abc")})
try({cat("abc")}) || "def"
try({cat("abc")}) || print("def")
runApp()
runApp()
runApp()
runApp()
runApp()
the_data
the_data <- read_excel("Classif_Var_LFB_NA.xlsx",.name_repair="universal") %>% sample_frac(1/10)
tibble(user_tag1=rep(NULL,nrow(the_data))
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?updateSelectizeInput
runApp()
runApp()
runApp()
?verbatimTextOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.character(TRUE)
as.character(NULL)
runApp()
runApp()
runApp()
input
output
output$sampleInfo
output$binPlot
output$showTagBox
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
numericInput("num", "Choose a number", 1.1, 1, 10),
conditionalPanel(
condition = "output.square",
div("That's a perfect square!", style = "color:red; height:400px;"),
style = "display: none;"
)
)
server <- function(input, output, session) {
output$square <- reactive({
sqrt(as.numeric(input$num)) %% 1 == 0
})
outputOptions(output, 'square', suspendWhenHidden = FALSE)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
?htmlOutput
runApp()
runApp()
runApp()
selectedSamples()
selectedData()
v$selectedData
runApp()
brushedPoints(the_data,input$binPlot_brush,allRows=T)
brushedPoints(the_data,input$binPlot_brush,allRows=T)$select_
brushedPoints(the_data,input$binPlot_brush,allRows=T)$Select_
brushedPoints(the_data,input$binPlot_brush,allRows=T) %>% names()
runApp()
brushedPoints(the_data,input$binPlot_brush,allRows=T)$selected_
runApp()
runApp()
runApp()
brushedPoints(the_data,input$binPlot_brush,allRows=T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
the_Ã¨data
atacazo
atacazo %>% filter(SiO2>55)
atacazo %>% filter(SiO2>60)
the_data <- read_excel("Classif_Var_LFB_NA.xlsx",.name_repair="universal") %>%
rowid_to_column("ID") %>%
sample_frac(1/10)
the_data
read_excel("Classif_Var_LFB_NA.xlsx",.name_repair="universal") %>%
sample_frac(1/10) %>%
rowid_to_column("ID")
?Rserved
?Reserved
runApp()
tags
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderUI
runApp()
runApp()
runApp()
!isValidTag()
runApp()
runApp()
tagging$userTags
dataProcessing$selectedData
dataProcessing$selectedData$ID
dataProcessing$selectedData %>% select(ID)
tagging$userTags
requiredField
runApp()
runApp()
add_column(tagging$userTags,!!rlang::parse_expr(requiredField))
add_column(tagging$userTags,rlang::parse_expr(requiredField))
add_column(tagging$userTags,requiredField)
runApp()
dataProcessing$selectedData %>% c(requiredField=requiredVal) %>% select(ID,!!rlang:parse_expr(requiredField))
dataProcessing$selectedData %>% mutate(c(requiredField=requiredVal)) %>% select(ID,!!rlang:parse_expr(requiredField))
dataProcessing$selectedData %>% mutate(c(requiredField=requiredVal)) %>%
select(ID,!!rlang::parse_expr(requiredField))
dataProcessing$selectedData %>% mutate(c(!!rlang::parse_expr(requiredField=requiredVal)) %>%
select(ID,!!rlang::parse_expr(requiredField))
dataProcessing$selectedData %>% mutate(c(!!rlang::parse_expr(requiredField=requiredVal))) %>%
select(ID,!!rlang::parse_expr(requiredField))
dataProcessing$selectedData %>% mutate(c(!!rlang::parse_expr(requiredField)=requiredVal)) %>%
select(ID,!!rlang::parse_expr(requiredField))
dataProcessing$selectedData %>% mutate(c(!!rlang::parse_expr(requiredField)=requiredVal))
runApp()
runApp()
runApp()
?updateSelectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input
runApp()
tagFields
if( !isValidTag() ){return(NULL)}
if(! (requiredField %in% tagFields) ){
addTag(requiredField)
}
runApp()
requiredField
addTag(requiredField)
runApp()
newTag
tagging$userTags
add_column(tagging$userTags,newTag)
add_column(tagging$userTags,!!newTag=NULL)
add_column(tagging$userTags,!!rland::parse_expr(newTag)=NULL)
add_column(tagging$userTags,!!rlang::parse_expr(newTag)=NULL)
add_column(tagging$userTags,!!rlang::parse_expr(newTag))
add_column(tagging$userTags,!!newTag)
newTag
!!!newTag
!!newTag
add_column(tagging$userTags,!!!newTag)
add_column(tagging$userTags,!!newTag,.name_repair = "universal")
add_column(tagging$userTags,!!newTag)
add_column(tagging$userTags,{{newTag}} )
str_remove(newTag,'"')
add_column(tagging$userTags,{{str_remove(newTag,'"')}} )
add_column(tagging$userTags,str_remove({{newTag}},'"' )
)
foo <- str_remove(newTag,'"')
foo
add_column(tagging$userTags,{{foo}} )
add_column(tagging$userTags,{{foo}}:=NULL )
add_column(tagging$userTags,{{newTag}} )
myval <- "rr"
uu<-tibble(ID=seq(1:4))
uu
uu %>% add_column(!!myval)
uu %>% add_column({{myval}})
uu %>% add_column(myval)
uu %>% add_column(!!myval)
uu %>% add_column(!myval)
uu %>% add_column(!!myval)
uu %>% add_column({myval})
uu %>% add_column(!!{myval})
uu %>% add_column(!{myval})
df <- data.frame("Oranges" = 5)
mycols <- c("Apples", "Bananas", "Oranges")
add_column(df, !!(mycols[2]) := 7)
uu %>% add_column(!(myval))
uu %>% add_column(!!(myval))
myval
mycols
mycol <- mycols[2]
add_column(df, !!(mycol) := 7)
add_column(df, !!(mycol) )
uu %>% add_column(!!(myval) := NULL )
uu %>% add_column(!!(myval) := "" )
dd_column(tagging$userTags,!!(newTag) := NA)
add_column(tagging$userTags,!!(newTag) := NA)
# Add to the tag table
tagging$userTags <- add_column(tagging$userTags,!!(newTag) := NA)
# Add to the selecte lists
tagging$by_variables <- c(tagging$by_variables,newTag)
# Update the tag widget
updateSelectizeInput(tag_col,
choices=setdiff(names(tagging$userTags),"ID") )
# Update the tag widget
updateSelectizeInput("tag_col",
choices=setdiff(names(tagging$userTags),"ID") )
# Update the tag widget
updateSelectizeInput(inputId="tag_col",
choices=setdiff(names(tagging$userTags),"ID") )
# Update the tag widget
updateSelectizeInput(inputId="tag_col",
choices=setdiff(names(tagging$userTags),"ID") )
runApp()
# Add to the tag table
tagging$userTags <- add_column(tagging$userTags,!!(newTag) := NA)
# Add to the selecte lists
tagging$by_variables <- c(tagging$by_variables,newTag)
# Update the tag widget
updateSelectizeInput(inputId="tag_col",
choices=setdiff(names(tagging$userTags),"ID") )
# update the input widgets to reflect these changes
widgetsToUpdate <- c("color_by","shape_by","size_by","facet_by")
.updateW <- function(thewidget){
updateSelectizeInput(inputId=thewidget,
choices=tagging$by_variables)
}
walk(widgetsToUpdate,.updateW)
addTag <- function(newTag){
# When we create a tag we must update in all sort of places !
browser()
# Add to the tag table
tagging$userTags <- add_column(tagging$userTags,!!(newTag) := NA)
# Add to the selecte lists
tagging$by_variables <- c(tagging$by_variables,newTag)
# Update the tag widget
updateSelectizeInput(inputId="tag_col",
choices=setdiff(names(tagging$userTags),"ID") )
# update the input widgets to reflect these changes
widgetsToUpdate <- c("color_by","shape_by","size_by","facet_by")
.updateW <- function(thewidget){
updateSelectizeInput(inputId=thewidget,
choices=tagging$by_variables)
}
walk(widgetsToUpdate,.updateW)
}
outputOptions(output, 'showTagBox', suspendWhenHidden = FALSE)
observeEvent(input$tag_do,{
## Preparation
# Currently existing tag fields
tagFields <- names(tagging$userTags)
# Required tagField
requiredField <- input$tag_col
# Required value
requiredVal <- input$tag_val
## Check that the field is not already present in the dataset
# if it is, do nothing
if( !isValidTag() ){return(NULL)}
## See if the column exists in userTags - if not, create it and update what needs to be
if(! (requiredField %in% tagFields) ){
addTag(requiredField)
}
## Update the list of user tags
# tagging$userTags <- updateTagTable(tagging$userTags, ??? )
## housekeeping (last used values)
tagging$lastUsedTag <- requiredField
tagging$lastUsedVal <- requiredVal
})
# If we change the tag col we must re-populate the list of existing tags...
observeEvent(input$tag_col,{
if(isValidTag() ){
}else{
# activtate/deactivate "do" button
}
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tagTable
requiredField
selectedData
selectedData$ID
tagTable[selectedData$ID,]
tagTable[selectedData$ID,requiredField]
tagTable[selectedData$ID,requiredField]<-requiredVal
tagTable
runApp()
?toggleState
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
